{"version":3,"sources":["components/generic/SvgImage.tsx","public/flower.svg","components/generic/TriangleButton.tsx","components/generic/Label.tsx","components/generic/HorizontalStepper.tsx","components/generic/Button.tsx","components/Breather.tsx","components/generic/Modal.tsx","components/generic/SwitchButton.tsx","components/Settings.tsx","components/generic/IconButton.tsx","components/SettingsModal.tsx","App.tsx","reportWebVitals.ts","index.tsx","public/themes.js"],"names":["SvgImage","alt","className","path","src","TriangleButton","onClick","invert","defaultProps","Label","text","HorizontalStepper","value","decrease","increase","Button","disabled","Breather","useState","localStorage","getItem","minutes","setMinutesState","isRunning","setRunning","setMinutes","v","setItem","toString","flower","setTimeout","Modal","show","content","component","id","SwitchButton","onChange","defaultChecked","type","Settings","isDarkModeEnabled","toggleTheme","IconButton","icon","SettingsModal","setShow","App","useEffect","keepTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","THEME","THEME_LIGHT","THEME_DARK","setTheme","themeName","documentElement","module","exports"],"mappings":"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","file":"static/js/main.8647057d.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n    path: string;\n    alt?: string;\n    className?: string;\n};\nconst SvgImage = ({alt, className, path}: Props) => {\n    return (\n        <div>\n            <img className={className} src={path} alt={alt}/>\n        </div>\n    );\n};\n\nexport default SvgImage\n","export default __webpack_public_path__ + \"static/media/flower.19b11709.svg\";","import React from \"react\";\n\ninterface TriangleButtonProperties {\n    onClick: () => void;\n    invert?: boolean;\n}\n\nconst TriangleButton: React.FC<TriangleButtonProperties> =\n    ({\n         onClick,\n         invert,\n     }) => {\n        return (\n            <div\n                onClick={onClick}\n                className={'triangle' + (invert ? ' flip-horizontally' : '')}\n            >\n            </div>\n        )\n    }\n\nTriangleButton.defaultProps = {\n    invert: false\n}\n\nexport default TriangleButton\n","import React from \"react\";\n\ninterface LabelProperties {\n    text: string;\n}\n\nconst Label: React.FC<LabelProperties> =\n    ({\n         text,\n     }) => {\n        return (\n            <div\n                className='label'\n            >\n                {text}\n            </div>\n        )\n    }\n\nexport default Label\n","import React from \"react\";\nimport TriangleButton from \"./TriangleButton\";\nimport Label from \"./Label\";\n\ninterface HorizontalStepperProperties {\n    value: string;\n    decrease: () => void;\n    increase: () => void;\n}\n\nconst HorizontalStepper: React.FC<HorizontalStepperProperties> =\n    ({value, decrease, increase}) => {\n        return (\n            <div className={'row'}>\n                <TriangleButton invert={true} onClick={decrease}/>\n                <Label text={value}/>\n                <TriangleButton onClick={increase}/>\n            </div>\n        )\n    }\n\nexport default HorizontalStepper\n","import React from \"react\";\n\ninterface ButtonProperties {\n    text: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nconst Button: React.FC<ButtonProperties> =\n    ({\n         text,\n         onClick,\n         disabled\n     }) => {\n        return (\n            <button\n                onClick={onClick}\n                className={disabled ? 'btn btn-disabled' : 'btn'}\n                disabled={disabled}\n            >\n                {text}\n            </button>\n        )\n    }\n\nButton.defaultProps = {\n    disabled: false\n}\n\nexport default Button\n","import * as React from 'react';\nimport {useState} from 'react';\nimport SvgImage from \"./generic/SvgImage\";\nimport flower from \"../public/flower.svg\";\nimport HorizontalStepper from \"./generic/HorizontalStepper\";\nimport Button from \"./generic/Button\";\n\nexport const Breather = () => {\n    const [minutes, setMinutesState] = useState(+(localStorage.getItem('breathing-minutes') || 5))\n    const [isRunning, setRunning] = useState(false)\n\n    const setMinutes = (v: number) => {\n        setMinutesState(v);\n        localStorage.setItem('breathing-minutes', v.toString());\n    }\n\n    const increaseMinutes = () => {\n        if (minutes < 5) {\n            setMinutes(minutes + 1);\n        } else if (minutes < 60) {\n            setMinutes(minutes + 5);\n        } else {\n            setMinutes(60);\n        }\n    }\n\n    const decreaseMinutes = () => {\n        if (minutes <= 1) {\n            setMinutes(1)\n        } else if (minutes <= 5) {\n            setMinutes(minutes - 1);\n        } else {\n            setMinutes(minutes - 5)\n        }\n    }\n\n    const run = () => {\n        setRunning(true);\n        setTimeout(() => setRunning(false), minutes * 1000 * 60)\n    }\n\n    return (\n        <div className={isRunning ? 'hide-cursor' : ''}>\n            <SvgImage path={flower} className={isRunning ? 'flower flower-static' : 'flower-static'}/>\n            <div className={isRunning ? 'hidden' : ''}>\n                <HorizontalStepper value={`${minutes} minute${minutes > 1 ? 's' : ''}`} decrease={decreaseMinutes}\n                                   increase={increaseMinutes}/>\n                <Button onClick={run} text={\"Begin\"}/>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\n\ntype Props = {\n    show: boolean\n    content: React.ReactNode;\n    onClick: () => void;\n}\n\nconst Modal = ({show, content, onClick}: Props) => {\n    const component = <div className=\"overlay\">\n        <div className=\"modal\" id=\"modal\">\n            <div className=\"content\">\n                {content}\n            </div>\n            <div className=\"actions\">\n                <button className=\"btn\" onClick={onClick}>\n                    Close\n                </button>\n            </div>\n        </div>\n    </div>;\n\n    return (\n        <>\n            {show ? component : null}\n        </>\n    );\n}\n\nexport default Modal;\n","import * as React from 'react';\n\ntype Props = {\n    onChange: () => void;\n    defaultChecked?: boolean;\n};\nexport const SwitchButton = ({onChange, defaultChecked}: Props) => {\n    return (\n        <label className=\"switch\">\n            <input type=\"checkbox\" onChange={onChange} defaultChecked={defaultChecked}/>\n            <span className=\"slider round\"/>\n        </label>\n    );\n};\n\nSwitchButton.defaultProps = {\n    defaultChecked: false\n}\n","import React from 'react';\nimport Label from \"./generic/Label\";\nimport {SwitchButton} from \"./generic/SwitchButton\";\nimport {isDarkModeEnabled, toggleTheme} from \"../public/themes\";\n\nconst Settings = () => {\n    return (\n        <>\n            <div className=\"settings-container\">\n                <div className=\"settings-item\">\n                    <Label text={\"Dark Mode\"}/>\n                </div>\n                <div className=\"settings-item\">\n                    <SwitchButton defaultChecked={isDarkModeEnabled()} onChange={toggleTheme}/>\n                </div>\n            </div>\n            <div className=\"settings-container\">\n                <div className=\"settings-item\">\n                    <Label text={\"Author\"}/>\n                </div>\n                <div className=\"settings-item\">\n                    <Label text={\"@azheltishev\"}/>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Settings\n","import * as React from 'react';\nimport {Icon} from \"@iconify/react\";\n\ntype Props = {\n    onClick: () => void;\n    icon: string;\n    className?: string;\n};\nexport const IconButton = ({onClick, icon, className}: Props) => {\n    return (\n        <div>\n            <Icon icon={`mdi:${icon}`} className={`icon-btn ${className}`} onClick={onClick}/>\n        </div>\n    );\n};\n\nIconButton.defaultProps = {\n    className: ''\n}\n","import React, {useState} from 'react';\nimport Modal from \"./generic/Modal\";\nimport Settings from \"./Settings\";\nimport {IconButton} from \"./generic/IconButton\";\n\nconst SettingsModal = () => {\n    const [show, setShow] = useState(false);\n\n    return (\n        <>\n            <IconButton onClick={() => setShow(true)} icon=\"cog\" className=\"top-right-corner\"/>\n            <Modal show={show} content={<Settings/>} onClick={() => setShow(false)}/>\n        </>\n    );\n}\n\nexport default SettingsModal;\n","import React, {useEffect} from 'react';\nimport {Breather} from \"./components/Breather\";\nimport SettingsModal from \"./components/SettingsModal\";\nimport {keepTheme} from './public/themes';\n\nfunction App() {\n    useEffect(() => {\n        keepTheme();\n    })\n    return (\n        <div className=\"container\">\n            <Breather/>\n            <SettingsModal/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const THEME = 'theme';\nconst THEME_LIGHT = 'theme-light';\nconst THEME_DARK = 'theme-dark';\n\nfunction setTheme(themeName) {\n    localStorage.setItem(THEME, themeName);\n    document.documentElement.className = themeName;\n}\n\nfunction keepTheme() {\n    if (localStorage.getItem(THEME)) {\n        if (localStorage.getItem(THEME) === THEME_DARK) {\n            setTheme(THEME_DARK);\n        } else if (localStorage.getItem(THEME) === THEME_LIGHT) {\n            setTheme(THEME_LIGHT);\n        }\n    } else {\n        setTheme(THEME_DARK);\n    }\n}\n\nfunction isDarkModeEnabled() {\n    return localStorage.getItem(THEME) === THEME_DARK;\n}\n\nfunction toggleTheme() {\n    if (localStorage.getItem(THEME) === THEME_DARK) {\n        setTheme(THEME_LIGHT);\n        return THEME_LIGHT;\n    } else {\n        setTheme(THEME_DARK);\n        return THEME_DARK;\n    }\n}\n\nmodule.exports = {\n    setTheme,\n    keepTheme,\n    isDarkModeEnabled,\n    toggleTheme,\n    THEME_LIGHT,\n    THEME_DARK\n}\n"],"sourceRoot":""}