{"version":3,"sources":["components/generic/SvgImage.tsx","public/flower.svg","components/generic/TriangleButton.tsx","components/generic/Label.tsx","components/generic/HorizontalStepper.tsx","components/generic/Button.tsx","components/Breather.tsx","components/generic/Modal.tsx","components/Settings.tsx","components/generic/IconButton.tsx","components/SettingsModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SvgImage","alt","className","path","src","TriangleButton","onClick","invert","defaultProps","Label","text","HorizontalStepper","value","decrease","increase","Button","disabled","Breather","useState","minutes","setMinutes","isRunning","setRunning","flower","setTimeout","Modal","show","content","component","id","Settings","IconButton","icon","SettingsModal","setShow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.250bca6c.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n    path: string;\n    alt?: string;\n    className?: string;\n};\nconst SvgImage = ({alt, className, path}: Props) => {\n    return (\n        <div>\n            <img className={className} src={path} alt={alt}/>\n        </div>\n    );\n};\n\nexport default SvgImage\n","export default __webpack_public_path__ + \"static/media/flower.19b11709.svg\";","import React from \"react\";\n\ninterface TriangleButtonProperties {\n    onClick: () => void;\n    invert?: boolean;\n}\n\nconst TriangleButton: React.FC<TriangleButtonProperties> =\n    ({\n         onClick,\n         invert,\n     }) => {\n        return (\n            <div\n                onClick={onClick}\n                className={'triangle' + (invert ? ' flip-horizontally' : '')}\n            >\n            </div>\n        )\n    }\n\nTriangleButton.defaultProps = {\n    invert: false\n}\n\nexport default TriangleButton\n","import React from \"react\";\n\ninterface LabelProperties {\n    text: string;\n}\n\nconst Label: React.FC<LabelProperties> =\n    ({\n         text,\n     }) => {\n        return (\n            <div\n                className='label'\n            >\n                {text}\n            </div>\n        )\n    }\n\nexport default Label\n","import React from \"react\";\nimport TriangleButton from \"./TriangleButton\";\nimport Label from \"./Label\";\n\ninterface HorizontalStepperProperties {\n    value: string;\n    decrease: () => void;\n    increase: () => void;\n}\n\nconst HorizontalStepper: React.FC<HorizontalStepperProperties> =\n    ({value, decrease, increase}) => {\n        return (\n            <div className={'row'}>\n                <TriangleButton invert={true} onClick={decrease}/>\n                <Label text={value}/>\n                <TriangleButton onClick={increase}/>\n            </div>\n        )\n    }\n\nexport default HorizontalStepper\n","import React from \"react\";\n\ninterface ButtonProperties {\n    text: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nconst Button: React.FC<ButtonProperties> =\n    ({\n         text,\n         onClick,\n         disabled\n     }) => {\n        return (\n            <button\n                onClick={onClick}\n                className={disabled ? 'btn btn-disabled' : 'btn'}\n                disabled={disabled}\n            >\n                {text}\n            </button>\n        )\n    }\n\nButton.defaultProps = {\n    disabled: false\n}\n\nexport default Button\n","import * as React from 'react';\nimport {useState} from 'react';\nimport SvgImage from \"./generic/SvgImage\";\nimport flower from \"../public/flower.svg\";\nimport HorizontalStepper from \"./generic/HorizontalStepper\";\nimport Button from \"./generic/Button\";\n\nexport const Breather = () => {\n    const [minutes, setMinutes] = useState(5)\n    const [isRunning, setRunning] = useState(false)\n\n    const increaseMinutes = () => {\n        if (minutes >= 60) {\n            setMinutes(60);\n        } else {\n            setMinutes(minutes + 5);\n        }\n    }\n\n    const decreaseMinutes = () => {\n        if (minutes <= 5) {\n            setMinutes(5)\n        } else {\n            setMinutes(minutes - 5);\n        }\n    }\n\n    const run = () => {\n        setRunning(true);\n        setTimeout(() => setRunning(false), minutes * 1000 * 60)\n    }\n\n    return (\n        <>\n            <SvgImage path={flower} className={isRunning ? 'flower flower-static' : 'flower-static'}/>\n            {isRunning ? null : <>\n                <HorizontalStepper value={`${minutes} minutes`} decrease={decreaseMinutes}\n                                   increase={increaseMinutes}/>\n                <Button onClick={run} text={\"Begin\"}/>\n            </>}\n        </>\n    );\n};\n","import React from 'react';\n\ntype Props = {\n    show: boolean\n    content: React.ReactNode;\n    onClick: () => void;\n}\n\nconst Modal = ({show, content, onClick}: Props) => {\n    const component = <div className=\"overlay\">\n        <div className=\"modal\" id=\"modal\">\n            <div className=\"content\">\n                {content}\n            </div>\n            <div className=\"actions\">\n                <button className=\"toggle-button\" onClick={onClick}>\n                    Close\n                </button>\n            </div>\n        </div>\n    </div>;\n\n    return (\n        <>\n            {show ? component : null}\n        </>\n    );\n}\n\nexport default Modal;\n","import React from 'react';\nimport Label from \"./generic/Label\";\nimport Button from \"./generic/Button\";\n\nconst Settings = () => {\n    return (\n        <>\n            <div className=\"settings-container\">\n                <div className=\"settings-item\">\n                    <Label text={\"Dark Mode\"}/>\n                </div>\n                <div className=\"settings-item\">\n                    <Button text={\"Soon\"} onClick={() => {\n                    }} disabled={true}/>\n                </div>\n            </div>\n            <div className=\"settings-container\">\n                <div className=\"settings-item\">\n                    <Label text={\"Author\"}/>\n                </div>\n                <div className=\"settings-item\">\n                    <Label text={\"@azheltishev\"}/>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Settings\n","import * as React from 'react';\nimport {Icon} from \"@iconify/react\";\n\ntype Props = {\n    onClick: () => void;\n    icon: string;\n    className?: string;\n};\nexport const IconButton = ({onClick, icon, className}: Props) => {\n    return (\n        <div>\n            <Icon icon={`mdi:${icon}`} className={`icon-btn ${className}`} onClick={onClick}/>\n        </div>\n    );\n};\n\nIconButton.defaultProps = {\n    className: ''\n}\n","import React, {useState} from 'react';\nimport Modal from \"./generic/Modal\";\nimport Settings from \"./Settings\";\nimport {IconButton} from \"./generic/IconButton\";\n\nconst SettingsModal = () => {\n    const [show, setShow] = useState(false);\n\n    return (\n        <>\n            <IconButton onClick={() => setShow(true)} icon=\"cog\" className=\"top-right-corner\"/>\n            <Modal show={show} content={<Settings/>} onClick={() => setShow(false)}/>\n        </>\n    );\n}\n\nexport default SettingsModal;\n","import React from 'react';\nimport {Breather} from \"./components/Breather\";\nimport SettingsModal from \"./components/SettingsModal\";\n\nfunction App() {\n    return (\n        <div className=\"container\">\n            <Breather/>\n            <SettingsModal/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}